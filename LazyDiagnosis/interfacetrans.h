#ifndef INTERFACETRANS_H
#define INTERFACETRANS_H

#include "astl.h"
#include "systransition.h"

/**
 * @brief The InterfaceTrans class represents a transition in the interface
 * @date Febbraio 2016
 * @author Giulio Quarenghi
 */
class InterfaceTrans
{
public:
    /**
     * @brief trans concrete component transition
     */
    SysTransition trans;
    /**
     * @brief delta diagnosis of the transition
     */
    std::set<std::set<std::string> > delta;
    /**
     * @brief pattern_gen true if generates a pattern event
     */
    bool pattern_gen;
    /**
     * @brief pattern_events list of pattern events generated by the transition
     */
    std::set<std::string> pattern_events;

    /**
     * @brief InterfaceTrans
     */
    InterfaceTrans();
    /**
     * @brief InterfaceTrans
     * @param t
     * @param d
     */
    InterfaceTrans(SysTransition t, std::set<std::set<std::string> > d);

    //required definitions to use a SysTransition as automata alphabet for astl lib
    /**
     * @brief char_type
     */
    typedef InterfaceTrans char_type;
    /**
     * @brief int_type
     */
    typedef long        int_type;
    /**
     * @brief size
     */
    static const size_t size;
    /**
     * @brief eq
     * @param x
     * @param y
     * @return
     */
    static bool eq(const char_type &x, const char_type &y) { return x == y; }
    /**
     * @brief lt
     * @param x
     * @param y
     * @return
     */
    static bool lt(const char_type &x, const char_type &y) { return x < y; }
    /**
     * @brief operator <
     * @param t
     * @return
     */
    bool operator<(const InterfaceTrans t) const;
    /**
     * @brief operator ==
     * @param t
     * @return
     */
    bool operator==(const InterfaceTrans t) const;
};

/**
 * @brief operator << print operator
 * @param out
 * @param t
 * @return
 */
std::ostream& operator<<(std::ostream& out, const InterfaceTrans& t);

#endif // INTERFACETRANS_H
