component model Breaker is
	event op, cl;
	input I;
	state closed, open;
	transition b1 = op(I), closed -> open, {},
		   b2 = cl(I), open -> closed, {},
	 	   b3 = op(I), closed -> closed, {},
		   b4 = cl(I), open -> open, {},
		   b5 = cl(I), closed -> closed, {},
		   b6 = op(I), open -> open, {};
end Breaker.


component model Protection is
	event op, cl;
	output O;
	state idle, awaken;
	transition p1 = (), idle -> awaken, {op(O)},
		   p2 = (), awaken -> idle, {cl(O)},
		   p3 = (), idle -> awaken, {cl(O)},
		   p4 = (), awaken -> idle, {op(O)};
end Protection.


component model Monitor is
	event di, co, nd, nc, rc, op;
	input E, I;	
	output O, R;
	state watch, trigger;
	transition m1  = nd(E), watch -> trigger, {op(R), rc(O)},
		   m2  = nd(E), watch -> trigger, {op(R)},
		   m3  = rc(I), watch -> trigger, {op(R)},
		   m4  = nd(E), trigger -> trigger, {},
		   m5  = di(E), watch -> watch, {},
		   m6  = co(E), watch -> watch, {},
		   m7  = nc(E), watch -> watch, {},
		   m8  = di(E), trigger -> trigger, {},
		   m9  = co(E), trigger -> trigger, {},
		   m10 = nc(E), trigger -> trigger, {};
end Monitor.

component model Line is
	event ni, nr, ps;
	input E;
	state normal, shorted, isolated, persistent;
	transition l1 = ni(E), normal -> shorted,    {},
		   l2 = nr(E), normal -> isolated,   {},
		   l3 = ps(E), normal -> persistent, {};
end Line.



network model ProtectionHardware is
	component b: Breaker, p: Protection;
	output O;
	link O(p)->I(b);
	pattern di(O) == b1(b),
		co(O) == b2(b),
		nd(O) == p3(p) | p1(p)b3(b),
		nc(O) == p4(p) | p2(p)b4(b);
	initial closed(b), idle(p);
end ProtectionHardware.


network model MonitorApparatus is
	component m1, m2: Monitor, r1, r2: Breaker;
	input Im1, Im2;
	output O;
	link Im1(this)->E(m1), Im2(this)->E(m2),
	     O(m1)->I(m2), O(m2)->I(m1),
	     R(m1)->I(r1), R(m2)->I(r2);
	pattern nr(O) = m7(m1)|m10(m1)|b1(r1)|m7(m2)|m10(m2)|b1(r2),
		ni(O) = (m1(m1)|m2(m1)|m4(m1))b3(r1)|b3(r1)m4(m1) |
			(m1(m2)|m2(m2)|m4(m2))b3(r2)|b3(r2)m4(m2),
		ps(O) = (m6(m1)m6(m2)|m6(m2)m6(m1))
			(m5(m1)m5(m2)|m5(m2)m5(m1));
	initial closed(r1), closed(r2), watch(m1), watch(m2);
	viewer m1(m1)->trg1, m2(m1)->trg1, m3(m1)->trg1,
	       b1(r1)->opr1, b2(r1)->clr1, 
	       m1(m2)->trg2, m2(m2)->trg2, m3(m2)->trg2,
	       b1(r2)->opr2, b2(r2)->clr2;
	ruler  m2(m1)->fm1, m2(m2)->fm2, 
	       b3(r1)->for1, b4(r1)->fcr1,
	       b3(r2)->for2, b4(r2)->fcr2;
end MonitorApparatus.


network model LineNet is
	component l: Line;
	input I;
	link I(this)->E(l);
	initial normal(l);
	ruler l1(l)->fls, l2(l)->fli, l3(l)->flp;
end LineNet.


system PowerTransmission is
	node L: LineNet is
	end L,
	node M: MonitorApparatus is
	end M,
	node W1: ProtectionHardware is
		viewer b1(b)->opb1, b2(b)->clb1, 
			b5(b)->alr1, b6(b)->alr1,
		       p1(p)->awk1, p2(p)->ide1, 
			p3(p)->awk1, p4(p)->ide1;
		ruler  b3(b)->fob1, b4(b)->fcb1,
	               p3(p)->fos1, p4(p)->fcs1;
	end W1,
	node W2: ProtectionHardware is
		viewer b1(b)->opb2, b2(b)->clb2, 
			b5(b)->alr2, b6(b)->alr2,
		       p1(p)->awk2, p2(p)->ide2, 
			p3(p)->awk2, p4(p)->ide2;
		ruler  b3(b)->fob2, b4(b)->fcb2,
	               p3(p)->fos2, p4(p)->fcs2;
	end W2;
	emergence O(W1)->Im1(M), O(W2)->Im2(M), O(M)->I(L);
end PowerTransmission.


problem Example is
	node L is
		obs [ ];
	end L,
	node M is
		obs [ trg1, opr1 ];
	end M,
	node W1 is
		obs [ awk1 ];
	end W1,
	node W2 is
		obs [ awk2, opb2 ];
	end W2;
end Example.
