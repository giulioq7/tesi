component model Breaker is
	event op, cl;
	input I;
	state closed, open;
	transition b1 = op(I), closed -> open, {},
		   b2 = cl(I), open -> closed, {},
	 	   b3 = op(I), closed -> closed, {},
		   b4 = cl(I), open -> open, {},
		   b5 = cl(I), closed -> closed, {},
		   b6 = op(I), open -> open, {};
end Breaker.


component model ProtectionDevice is
	event op, cl;
	output O;
	state idle, awaken;
	transition p1 = (), idle -> awaken, {op(O)},
		   p2 = (), awaken -> idle, {cl(O)},
		   p3 = (), idle -> awaken, {cl(O)},
		   p4 = (), awaken -> idle, {op(O)};
end ProtectionDevice.


component model ProtectionHardware is
	event nd, di, co, nc;
	input Cot;
	state con, dis1, dis2;
	transition w1 = nd(Cot), con  -> con,  {},
		   w2 = di(Cot), con  -> dis1, {},
		   w3 = di(Cot), dis1 -> dis2, {},
		   w4 = co(Cot), dis2 -> dis1, {},
		   w5 = co(Cot), dis1 -> con,  {},
		   w6 = nc(Cot), dis1 -> dis1, {},
		   w7 = nc(Cot), dis2 -> dis2, {};
end ProtectionHardware.


component model Line is
	event ni, nr, ps;
	input Cot;
	state normal, shorted, isolated, persistent;
	transition l1 = ni(Cot), normal -> shorted,    {},
		   l2 = nr(Cot), normal -> isolated,   {},
		   l3 = ps(Cot), normal -> persistent, {};
end Line.


network model ProtectionHardwareNet is
	component b: Breaker, p: ProtectionDevice;
	output O;
	link O(p) -> I(b);
	pattern di(O) == b1(b),
		co(O) == b2(b),
		nd(O) == p3(p) | p1(p)b3(b),
		nc(O) == p4(p) | p2(p)b5(b)?b4(b);
	initial closed(b), idle(p);
	viewer b1(b) -> opb, b2(b) -> clb,
	       p1(p) -> awk, p2(p) -> ide, p3(p) -> awk, p4(p) -> ide;
	ruler  b3(b) -> nob, b4(b) -> ncb,
	       p3(p) -> fop, p4(p) -> fcp;
end ProtectionHardwareNet.


network model AbstractProtectionHWNet is
	component W1, W2: ProtectionHardware;
	input I1, I2;
	output O;
	link I1(this) -> Cot(W1), I2(this) -> Cot(W2);
	pattern	ni(O) == w1(W1) | w1(W2),
		nr(O) == w6(W1) | w7(W1) | w6(W2) | w7(W2),
		ps(O) == (w5(W1)w1(W1)*w2(W1)(~w5(W1))*)+ | (w5(W2)w1(W2)*w2(W2)(~w5(W2))*)+;
	initial con(W1), con(W2);
	ruler  w1(W1) -> fdw1, w6(W1) -> fcw1a, w7(W1) -> fcw1b,
	       w1(W2) -> fdw2, w6(W2) -> fcw2a, w7(W2) -> fcw2b;
end AbstractProtectionHWNet.


network model AbstractProtectionHWNet2 is
	component W: ProtectionHardware;
	input I;
	output O;
	link I(this) -> Cot(W);
	pattern	ni(O) == w1(W),
		nr(O) == w6(W) | w7(W),
		ps(O) == (w5(W)w1(W)*w2(W)(~w5(W))*)+;
	initial con(W);
	ruler  w1(W) -> fdw, w6(W) -> fcwa, w7(W) -> fcwb;
end AbstractProtectionHWNet2.



network model LineNet is
	component L1, L2: Line;
	input I1, I2;
	link I1(this) -> Cot(L1), I2(this) -> Cot(L2);
	initial normal(L1), normal(L2);
	ruler  l1(L1) -> fil1, l2(L1) -> frl1, l3(L1) -> psl1,
	       l1(L2) -> fil2, l2(L2) -> frl2, l3(L2) -> psl2;
end LineNet.


system PowerTransmission is
	node N1: LineNet is
	end N1,
	node N2: AbstractProtectionHWNet is
	end N2,
	node N3: AbstractProtectionHWNet2 is
	end N3,
	node N4: ProtectionHardwareNet is
	end N4,
	node N5: ProtectionHardwareNet is
	end N5,
	node N6: ProtectionHardwareNet is
	end N6;
	emergence O(N2)->I1(N1), O(N3)->I2(N1), O(N4)->I1(N2), O(N5)->I2(N2), O(N6)->I(N3);
end PowerTransmission.


problem Example is
	node N1 is
		obs [ ];
	end N1,
	node N2 is
		obs [ ];
	end N2,
	node N3 is
		obs [ ];
	end N3,
	node N4 is
		obs [ awk, opb, ide ];
	end N4,
	node N5 is
		obs [ awk, opb ];
	end N5,
	node N6 is
		obs [ awk, opb, ide ];
	end N6;
end Example.
